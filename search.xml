<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VC维</title>
      <link href="/2019/10/12/C%E7%BB%B4/"/>
      <url>/2019/10/12/C%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<hr><p>VC 维是衡量函数类的复杂度的一种方式，通过评估函数类中函数的弯曲程度实现。WIKI上的解释是：空间中的点在经过排列之后，能够被模型f打散(shatter)的最大数量。</p><p>通过$y=a_0+a_1^Tx$将平面分割为两部分，如果满足平面中任意N个点（无论如何取值）总能被一条直线分开，而N+1个点却不行，则称该函数情况下的VC维为N。</p><p><img src="\images\pasted-39.png" alt="upload successful"></p><p>举个无穷的VC维的例子：</p><script type="math/tex; mode=display">f(x,a)=I(sina*x)</script><p><img src="\images\pasted-40.png" alt="upload successful"></p><p>从这两个例子，可以看出VC维刻画了函数的弯曲程度，越弯曲其VC维越大。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的几种决策树</title>
      <link href="/2019/10/12/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E5%86%B3%E7%AD%96%E6%A0%91/"/>
      <url>/2019/10/12/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/pinard/p/6053344.html">https://www.cnblogs.com/pinard/p/6053344.html</a><br><a href="https://blog.csdn.net/a857553315/article/details/95620881">https://blog.csdn.net/a857553315/article/details/95620881</a></p><hr><h3 id="特征选择："><a href="#特征选择：" class="headerlink" title="特征选择："></a>特征选择：</h3><p>如果瞎猜中的概率与特征选择出来的概率相差无几，那么就可以放弃该特征了。特征选择的标准是信息增益或信息增益比。</p><hr><blockquote><p>ID3算法与信息增益：（木有剪枝，只能处理离散数据）</p></blockquote><p>得知特征X的信息而使输出的分类Y的不确定性减少的程度。</p><p>条件熵：$H(Y|X)=\sum_{n}^{i=1}p_iH(Y|X=x_i)$</p><p>信息增益：$g(D,A)=H(D)-H(D|A)$，D是数据集，A是特征。</p><hr><h4 id="计算过程："><a href="#计算过程：" class="headerlink" title="计算过程："></a>计算过程：</h4><p>（1）计算数据集D的经验熵：</p><p>$H(D)=-\sum_{k=1}^{K}\frac{|C_k|}{|D|}log_2\frac{|C_k|}{|D|}$ ，k为第一级特征{纹理，色泽，触感}</p><p>（2）计算条件熵：</p><p>$H(D|A)=\sum_{i=1}^{n}\frac{|D_i|}{D}H(D_i)=\sum_{i=1}^{n}\frac{|D_i|}{|D|}\sum_{k=1}^{K}\frac{|D_{ik}|}{D_i}log_2\frac{|D_{ik}|}{|D_i|}$</p><p>i为第一级特征{ 纹理 / 色泽 / 触感 }，ik为纹理中的第二级特征{ 清晰，模糊，稍糊 }</p><p>（3）$g(D,A)=H(D)-H(D|A)$，越大越好。</p><ul><li>ID3算法就是完全依赖信息增益，但是信息增益明显对多个取值的特征有偏好，所以出现了使用增益率的C4.5算法。</li></ul><hr><blockquote><p>C4.5算法与增益率（后剪枝，可以处理连续数据—&gt;多叉树，特征要计算排序）</p></blockquote><p>$Gainratio(D,a)=\frac{Gain(D,a)}{IV(a)}$</p><p>固有值：$IV(a)=-\sum_{v=1}^{V}\frac{|D_v|}{|D|}log_2\frac{|D_v|}{|D|}$ ，Dv是第一级特征a下的第二级特征，固有值随V的个数增加而增加。</p><hr><blockquote><p>CART决策树（减少log的使用降低计算量，还可以用于回归，二叉树）</p></blockquote><p>使用Gini系数替代ID3里的熵，Gini系数越小越均衡（被错分的概率低），说明该样本只属于同一类的概率（纯度）越高。</p><p>$Gini(D)=\sum_{k=1}^{y}\sum_{k’ \ne k}p_k*p_k’=1-\sum_{k=1}^{y}p_k^2$ </p><p>pk表示选中的样本属于k类别的概率，则这个样本被分错的概率是(1-pk)</p><p>基尼指数（基尼不纯度）= 样本被选中的概率 * 样本被分错的概率</p><h3 id="预剪枝与后剪枝：（对抗过拟合与欠拟合）"><a href="#预剪枝与后剪枝：（对抗过拟合与欠拟合）" class="headerlink" title="预剪枝与后剪枝：（对抗过拟合与欠拟合）"></a>预剪枝与后剪枝：（对抗过拟合与欠拟合）</h3><ul><li>预剪枝：（边自上往下生成枝杈边剪枝）</li></ul><p>预剪枝使得很多分支没有展开，这不仅<code>降低了过拟合的风险</code>，还显著<code>减少了决策树的训练时间开销和测试时间</code>。但是，有些分支虽当前不能提升泛化性。甚至可能导致泛化性暂时降低，但在其基础上进行后续划分却有可能导致显著提高，因此预剪枝的这种贪心本质，给决策树带来了<code>欠拟合的风险</code>。</p><ul><li>后剪枝：（先生成枝桠，最后从下往上剪枝）</li></ul><p>后剪枝通常比预剪枝<code>保留更多的分支</code>，其<code>欠拟合风险很小</code>，因此后剪枝的<code>泛化性能</code>往往<code>优</code>于预剪枝决策树。但后剪枝过程是从底往上裁剪，因此其<code>训练时间开销</code>比前剪枝要<code>大</code>。</p><hr><h3 id="连续值处理：（密度-甜度）"><a href="#连续值处理：（密度-甜度）" class="headerlink" title="连续值处理：（密度/甜度）"></a>连续值处理：（密度/甜度）</h3><p>连续（非离散）特征可以将特征值从小到大排列然后取</p><script type="math/tex; mode=display">T_a={\frac{a_i+a_{i+1}}{2},0<i<n}</script><script type="math/tex; mode=display">Gain(D,a)=\max_{t \in T_a}  Gain(D,a,t)=max Ent(D)-\sum_{\lambda \in {-,+}}\frac{|D_t^\lambda|}{|D|}Ent(D_t^\lambda)</script><p>按照 $T_a$ 进行划分 { - ，+ }，从而得到该情况下的信息增益。</p><hr><h3 id="缺失值处理：（检测数据缺失）"><a href="#缺失值处理：（检测数据缺失）" class="headerlink" title="缺失值处理：（检测数据缺失）"></a>缺失值处理：（检测数据缺失）</h3><p>（1）如何在属性值缺失的情况下进行划分属性的选择？（创建决策树的时候怎么计算缺失值存在下的信息增益，选择正确的属性）<br>（2）给定划分属性，若样本在该属性上的值是缺失的，那么该如何对这个样本进行划分？（在分类过程中有缺失值的话怎么进行划分）</p><p>无缺失样本所占比例：$p=\frac{ \sum_{x \in \tilde{D}}w_x}{ \sum_{x \in D} w_x}$<br>无缺失样本中第k类所占比例：$\tilde{p}_k=\frac{ \sum_{x \in \tilde{D}_k}w_x}{ \sum_{x \in \tilde{D}} w_x}$<br>无缺失样本中在特征a上取值为$a_v$的样本所占比例：$\tilde{r}_v=\frac{ \sum_{x \in \tilde{D}_k}w_x}{ \sum_{x \in \tilde{D}} w_x}$</p><p>最后得到了推广了的公式：</p><script type="math/tex; mode=display">Gain(D,a)=p*Gain(D,\tilde a)=p*(Ent(\tilde D)-\sum_{v=1}^{V}\tilde{r}_vEnt(\tilde D^v))</script><ul><li>上式 = 总样本中非缺失的比例 *（非缺失中各类的熵-各类概率*各类特征值的熵）</li></ul><script type="math/tex; mode=display">Ent(\tilde D)=-\sum_{k=1}^{y}\tilde{p}_klog_2{\tilde{p}_k}</script><hr><blockquote><p>多变量决策树：</p></blockquote><p>一般的决策树分类边界由若干个与坐标轴平行的分段组成：</p><p>判断过程：密度 -&gt; 含糖率 -&gt; 密度 -&gt; 含糖率…</p><p><img src="\images\pasted-36.png" alt="upload successful"></p><p>多变量决策树有d个属性对应d维空间的一个数据点，对样本分类表示在坐标空间中找到不同样本之间的分类边界。</p><p><img src="https://upload-images.jianshu.io/upload_images/4559317-cf1865a361ae78d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多变量决策树.png"></p><p>“多变量决策树”能实现斜的划分边界，使决策树模型简化。在多变量决策树的学习过程中，不是为非叶结点寻找最优划分属性，而是试图建立合适的线性分类器：</p><p><img src="\images\pasted-37.png" alt="upload successful"></p><p>可以通过最小二乘或者嵌入神经网络进一步优化。</p><hr><p>增量学习：根据新样本可对学得的模型进行调整适应当前形势，而不需要重新训练。如ID4，ID5R还有ITI</p><hr><h3 id="熵与基尼系数哪个好"><a href="#熵与基尼系数哪个好" class="headerlink" title="熵与基尼系数哪个好"></a>熵与基尼系数哪个好</h3><p>和熵模型的度量方式比，基尼系数对应的误差有多大呢？对于二类分类，基尼系数和熵之半的曲线如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Gini = 2 * p * (1-p)</span><br><span class="line">H = (-p * np.log2(p) - (1 - p) * np.log2(1 - p))/2.0</span><br></pre></td></tr></table></figure><p><img src="\images\pasted-38.png" alt="upload successful"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line">from matplotlib import pyplot as plt </span><br><span class="line">import matplotlib as mpl</span><br><span class="line">mpl.rcParams[&apos;font.sans-serif&apos;] = [&apos;simHei&apos;]</span><br><span class="line">mpl.rcParams[&apos;axes.unicode_minus&apos;] = False</span><br><span class="line"> </span><br><span class="line">p = np.linspace(0.0001, 0.9999 ,50)</span><br><span class="line">Gini = 2 * p * (1-p)</span><br><span class="line">H = (-p * np.log2(p) - (1 - p) * np.log2(1 - p))/2.0</span><br><span class="line">x1 = np.linspace(0,0.5,50)</span><br><span class="line">y1 = x1</span><br><span class="line">x2 = np.linspace(0.5,1,50)</span><br><span class="line">y2 = 1- x2</span><br><span class="line"> </span><br><span class="line">plt.figure(figsize=(10,5))</span><br><span class="line">plt.plot(p, Gini, &apos;r-&apos;, label=&apos;基尼指数&apos;)</span><br><span class="line">plt.plot(p, H, &apos;b-&apos;, label=&apos;半熵&apos;)</span><br><span class="line">plt.plot(x1, y1, &apos;g-&apos;, label=&apos;分类误差率&apos;)</span><br><span class="line">plt.plot(x2, y2, &apos;g-&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.xlim(-0.01, 1.01)</span><br><span class="line">plt.ylim(0, 0.51)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>从上图可以看出，基尼系数和熵之半的曲线非常接近，因此，基尼系数可以做为熵模型的一个近似替代。而CART分类树算法就是使用的基尼系数来选择决策树的特征。为了进一步简化，CART分类树算法每次仅仅对某个特征的值进行二分，而不是多分，这样CART分类树算法建立起来的是二叉树，而不是多叉树。</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传教士和野人问题（M-C问题）</title>
      <link href="/2019/10/12/%E4%BC%A0%E6%95%99%E5%A3%AB%E5%92%8C%E9%87%8E%E4%BA%BA%E9%97%AE%E9%A2%98%EF%BC%88M-C%E9%97%AE%E9%A2%98%EF%BC%89/"/>
      <url>/2019/10/12/%E4%BC%A0%E6%95%99%E5%A3%AB%E5%92%8C%E9%87%8E%E4%BA%BA%E9%97%AE%E9%A2%98%EF%BC%88M-C%E9%97%AE%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><p>有N个传教士和N个野人来到河边渡河，河岸有一条船，每次至多可供k人乘渡。河两岸以及船上的野人数目总是不超过传教士的数目(否则不安全，传教士有可能被野人吃掉)。即求解传教士和野人从左岸全部摆渡到右岸的过程中，任何时刻满足M(传教士数)≥C(野人数)和M+C≤k的摆渡方案。以下讨论三个传教士三个野人还有一条船最多能载两个人的方案。</p><blockquote><p>状态空间</p></blockquote><p>我们用一个三元组(m，c，b)来表示河岸上的状态，其中m、c分别代表某一岸上传教士与野人的数目，b=1表示船在这一岸，b=0则表示船不在</p><p>约束条件是: 两岸上M≥C, 船上M+C≤2</p><p>（mi，ci）为船上的传教士和野人数量</p><p>左岸初态为（3,3,1），终态为（0,0,0）</p><p><img src="\images\pasted-35.png" alt="upload successful"></p><hr><blockquote><p>为什么不能直接暴力穷举然后剪枝？</p></blockquote><p>因为可能运过去两个人，然后又把同样的两个人运回来了(或者使用别的形式但是依旧是空转)，所以要杜绝这种可能，当然最好的方法就是使用带有记忆的状态，如果之前遇到过这种状态那就拒绝执行return。</p><p>所以….如何实现去重的目标？？？</p><p>答：set<string/int>，我采取的是单个状态采用int，记录路径经过的状态采用string（中间用空格隔开）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int N;</span><br><span class="line">set&lt;string&gt;ans;</span><br><span class="line">void print(vector&lt;int&gt;way)&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    string h;</span><br><span class="line">    for(i=1;i&lt;way.size();i++)&#123;</span><br><span class="line">        printf(&quot;%03d   &quot;,way[i]);</span><br><span class="line">        if(way[i]&lt;100)&#123;</span><br><span class="line">            h+=&quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        h+=to_string(way[i]);</span><br><span class="line">        h+=&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;&quot;\n-------&quot;&lt;&lt;endl;</span><br><span class="line">    ans.insert(h);</span><br><span class="line">&#125;</span><br><span class="line">void dfs(int pre,int ni,int nj,int c,set&lt;int&gt;s,vector&lt;int&gt;way)&#123;</span><br><span class="line">    // set insert</span><br><span class="line">    int now=ni*100+nj*10+c;</span><br><span class="line">    s.insert(pre);    </span><br><span class="line">    if(s.count(now)||(N-ni)&lt;0||(N-nj)&lt;0||ni&lt;0||nj&lt;0||(ni&lt;nj&amp;&amp;ni!=0)||((N-ni)&lt;(N-nj)&amp;&amp;(N-ni)!=0))&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if(pre==0)&#123;</span><br><span class="line">        // 如果上一轮就截止了</span><br><span class="line">        print(way);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    way.push_back(pre);</span><br><span class="line">    if(c==1)&#123;</span><br><span class="line">        // zero people . no one on ship is illegal</span><br><span class="line">        // dfs(now,ni,nj,0,s,way);</span><br><span class="line">        // one people on</span><br><span class="line">        dfs(now,ni-1,nj,0,s,way);</span><br><span class="line">        dfs(now,ni,nj-1,0,s,way);</span><br><span class="line">        // two people on</span><br><span class="line">        dfs(now,ni-2,nj,0,s,way);</span><br><span class="line">        dfs(now,ni,nj-2,0,s,way);</span><br><span class="line">        dfs(now,ni-1,nj-1,0,s,way);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        // zero people . no one on ship is illegal</span><br><span class="line">        // dfs(now,ni,nj,1,s,way);</span><br><span class="line">        // one people on</span><br><span class="line">        dfs(now,ni+1,nj,1,s,way);</span><br><span class="line">        dfs(now,ni,nj+1,1,s,way);</span><br><span class="line">        // two people on</span><br><span class="line">        dfs(now,ni+2,nj,1,s,way);</span><br><span class="line">        dfs(now,ni,nj+2,1,s,way);</span><br><span class="line">        dfs(now,ni+1,nj+1,1,s,way);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int chooseN;</span><br><span class="line">    int c=1;</span><br><span class="line">    // init num and ship side 1 means left and 0 means right</span><br><span class="line">    int ni,nj;</span><br><span class="line">    // Ni(传教士),Nj(野人) on the left side.</span><br><span class="line">    int pre=-1;</span><br><span class="line">    set&lt;int&gt;s;</span><br><span class="line">    //cin&gt;&gt;chooseN;</span><br><span class="line">    chooseN=3;</span><br><span class="line">    N=nj=ni=chooseN;</span><br><span class="line">    vector&lt;int&gt;way;</span><br><span class="line">    dfs(pre,ni,nj,c,s,way);</span><br><span class="line">    cout&lt;&lt;&quot;\nfinally , the answer is:\n\n&quot;;</span><br><span class="line">    for(auto it=ans.begin();it!=ans.end();it++)&#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">331   310   321   300   311   110   221   020   031   010   111   </span><br><span class="line">-------</span><br><span class="line">331   310   321   300   311   110   221   020   031   010   111   </span><br><span class="line">-------</span><br><span class="line">331   310   321   300   311   110   221   020   031   010   021   </span><br><span class="line">-------</span><br><span class="line">331   310   321   300   311   110   221   020   031   010   021</span><br><span class="line">-------</span><br><span class="line">331   220   321   300   311   110   221   020   031   010   111</span><br><span class="line">-------</span><br><span class="line">331   220   321   300   311   110   221   020   031   010   111   </span><br><span class="line">-------</span><br><span class="line">331   220   321   300   311   110   221   020   031   010   021</span><br><span class="line">-------</span><br><span class="line">331   220   321   300   311   110   221   020   031   010   021</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">finally , the answer is:</span><br><span class="line"></span><br><span class="line">331 220 321 300 311 110 221 020 031 010 021</span><br><span class="line">331 220 321 300 311 110 221 020 031 010 111</span><br><span class="line">331 310 321 300 311 110 221 020 031 010 021</span><br><span class="line">331 310 321 300 311 110 221 020 031 010 111</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h4 id="传说中的基于A-算法的解法："><a href="#传说中的基于A-算法的解法：" class="headerlink" title="传说中的基于A*算法的解法："></a>传说中的基于A*算法的解法：</h4><p>评估函数的建立：</p><script type="math/tex; mode=display">f=d+h=d+M+N-2*B</script><p>M 表示左岸的传教士的人数，N 表示左岸野人的数目，B 取值为0或1 ，1 表示船在左岸，0 表示船在右岸。d 表示节点的深度。</p><ul><li>下面我们来证明h(n)＝M+C-2B是满足A*条件的：</li></ul><p>我们分两种情况考虑。<br>（1）先考虑船在左岸的情况。如果<code>不考虑限制条件</code>，也就是说，船一次可以将三人从左岸运到右岸，然后再有一个人将船送回来。这样，船一个来回可以运过河2人，而船仍然在左岸。而最后剩下的三个人，则可以一次将他们全部从左岸运到右岸。所以，在不考虑限制条件的情况下，也至少需要摆渡[(M+N-3)/2]*2+1次。其中分子上的”－3”表示剩下三个留待最后一次运过去。除以”2”是因为一个来回可以运过去2人，需要[(M+N-3)/2]个来回，而”来回”数不能是小数，需要向上取整，这个用符号[ ]表示。而乘以”2”是因为一个来回相当于两次摆渡，所以要乘以2。而最后的”＋1”，则表示将剩下的3个运过去，需要一次摆渡。</p><p>化简得：需要 M+N-2次单向摆渡</p><p>（2）再考虑船在右岸的情况。同样不考虑限制条件。船在右岸，需要一个人将船运到左岸。因此对于状态(M，N，0)来说，其所需要的最少摆渡数，相当于船在左岸时状态(M+1，N，1)或(M，N+1，1)所需要的最少摆渡数，再加上第一次将船从右岸送到左岸的一次摆渡数。因此所需要的最少摆渡数为：(M+N+1)-2+1。其中(M+N+1)的”＋1”表示送船回到左岸的那个人，而最后边的”＋1”，表示送船到左岸时的一次摆渡。</p><p>化简有：(M+N+1)-2+1=M+N。</p><p>综合船在左岸和船在右岸两种情况下，所需要的最少摆渡次数用一个式子表示为：$M+N-2B$ ，其中B＝1表示船在左岸，B＝0表示船在右岸。该摆渡次数是在不考虑限制条件下，推出的最少所需要的摆渡次数。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树</title>
      <link href="/2019/10/01/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2019/10/01/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>鸣谢：<br><a href="https://www.jianshu.com/p/0eaea4cc5619">https://www.jianshu.com/p/0eaea4cc5619</a><br><a href="https://blog.csdn.net/tanrui519521/article/details/80980135">https://blog.csdn.net/tanrui519521/article/details/80980135</a><br><a href="https://zhuanlan.zhihu.com/p/24367771">https://zhuanlan.zhihu.com/p/24367771</a></p><p>删除：<a href="https://www.cnblogs.com/tongy0/p/5460623.html">https://www.cnblogs.com/tongy0/p/5460623.html</a></p><hr><p>红黑树虽然本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为O(log n)。</p><p>性能优于AVL树，C++中的map，以及Java中的TreeMap，TreeSet， Java8中的HashMap的实现也采用了红黑树。</p><blockquote><p>5条基本特征：</p></blockquote><p>（1）每个结点要么是红的要么是黑的。<br>（2）根结点是黑的。<br>（3）每个叶结点（叶结点即指树尾端NIL指针或NULL结点）都是黑的。<br>（4）如果一个结点是红的，那么它的两个儿子都是黑的。<br>（5）对于任意结点而言，其到叶结点树尾端NIL指针的每条路径都包含相同数目的黑结点。</p><ul><li>红黑树的5条特性确保了从根到叶子的最长的可能路径不多于最短的可能路径的两倍长，使得整棵树大致上是平衡的</li></ul><p><img src="\images\pasted-13.png" alt="upload successful"></p><blockquote><p>树的插入：（警惕红）</p></blockquote><p>新插入的节点总是设为红色的，所以如果父节点为黑色，就不需要修复，因为没有任何性质被改变，所以只有在父节点为红色节点时需要做修复操作。</p><p>可以肯定调节的时候该点一定有grandparent，因为根节点为黑，连续两个红才需要调整。</p><hr><h5 id="情况1：cur为红，parent为红，pParent为黑，uncle存在且为红"><a href="#情况1：cur为红，parent为红，pParent为黑，uncle存在且为红" class="headerlink" title="情况1：cur为红，parent为红，pParent为黑，uncle存在且为红"></a>情况1：cur为红，parent为红，pParent为黑，uncle存在且为红</h5><p>则将parent，uncle改为黑，pParent改为红，然后把pParent当成cur，继续向上调整。</p><blockquote><p>对策 :把父节点和叔叔节点变黑，爷爷节点涂红，然后把当前节点指针给到爷爷，让爷爷节点那层继续循环，接受红黑树特性检测。</p></blockquote><p><img src="\images\pasted-14.png" alt="simple case"></p><p><img src="\images\pasted-15.png" alt="z是当前点"></p><h5 id="情况2：cur为红，parent为红，pParent为黑，uncle不存在-u为黑"><a href="#情况2：cur为红，parent为红，pParent为黑，uncle不存在-u为黑" class="headerlink" title="情况2：cur为红，parent为红，pParent为黑，uncle不存在/u为黑"></a>情况2：cur为红，parent为红，pParent为黑，uncle不存在/u为黑</h5><blockquote><p>对策：当前节点的父节点作为新的当前节点，以新当前指点为支点左旋</p></blockquote><p>parent为pParent的左孩子，cur为parent的左孩子，则进行右单旋转。</p><p><img src="\images\pasted-16.png" alt="upload successful"></p><h5 id="情况3：当前节点的父节点是红色，叔叔节点是黑色-不存在，且当前节点是其父节点的右儿子，祖父节点的左儿子是父节点"><a href="#情况3：当前节点的父节点是红色，叔叔节点是黑色-不存在，且当前节点是其父节点的右儿子，祖父节点的左儿子是父节点" class="headerlink" title="情况3：当前节点的父节点是红色，叔叔节点是黑色/不存在，且当前节点是其父节点的右儿子，祖父节点的左儿子是父节点"></a>情况3：当前节点的父节点是红色，叔叔节点是黑色/不存在，且当前节点是其父节点的右儿子，祖父节点的左儿子是父节点</h5><blockquote><p>对策： 父节点变黑，祖父变红，以祖父节点为支点右旋</p></blockquote><hr><p>1为当前点，祖父节点为下一轮遍历的当前节点。</p><p><img src="\images\pasted-17.png" alt="只变色不拐"></p><p>4为当前点，取初始父节点3为下一轮遍历的当前节点。然后交换一下3和4，然后再重组</p><p><img src="\images\pasted-19.png" alt="不变色只拐"></p><p>3为当前点，取父亲为下一轮遍历的当前节点。</p><p><img src="\images\pasted-20.png" alt="变色+拐"></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define N 1000</span><br><span class="line">#define red true</span><br><span class="line">#define black false</span><br><span class="line">class Node&#123;</span><br><span class="line">    public:</span><br><span class="line">    static int length;</span><br><span class="line">    bool br;</span><br><span class="line">    // true red false black</span><br><span class="line">    int num;</span><br><span class="line">    Node*l,*r,*f;</span><br><span class="line">    Node()&#123;</span><br><span class="line">        num=-1;</span><br><span class="line">        r=f=l=NULL;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line">int Node::length=0;</span><br><span class="line">void left_turn(Node*&amp;root)&#123;</span><br><span class="line">    Node*p=root-&gt;f;</span><br><span class="line">    Node*pP=root-&gt;f-&gt;f;</span><br><span class="line">    if(p-&gt;l)&#123;</span><br><span class="line">        p-&gt;l-&gt;f=pP;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;f=pP-&gt;f;</span><br><span class="line">    pP-&gt;r=p-&gt;l;</span><br><span class="line">    p-&gt;l=pP;</span><br><span class="line">    if(pP-&gt;f==NULL)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    else if(pP-&gt;f-&gt;num&gt;pP-&gt;num)&#123;</span><br><span class="line">        pP-&gt;f-&gt;l=p;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        pP-&gt;f-&gt;r=p;</span><br><span class="line">    &#125;</span><br><span class="line">    pP-&gt;f=p;</span><br><span class="line">&#125;</span><br><span class="line">void right_turn(Node*&amp;root)&#123;</span><br><span class="line">    Node*p=root-&gt;f;</span><br><span class="line">    Node*pP=root-&gt;f-&gt;f;</span><br><span class="line">    if(p-&gt;r)&#123;</span><br><span class="line">        p-&gt;r-&gt;f=pP;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;f=pP-&gt;f;</span><br><span class="line">    pP-&gt;l=p-&gt;r;</span><br><span class="line">    p-&gt;r=pP;</span><br><span class="line">    if(pP-&gt;f==NULL)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    else if(pP-&gt;f-&gt;num&gt;pP-&gt;num)&#123;</span><br><span class="line">        pP-&gt;f-&gt;l=p;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        pP-&gt;f-&gt;r=p;</span><br><span class="line">    &#125;</span><br><span class="line">    pP-&gt;f=p;</span><br><span class="line">&#125;</span><br><span class="line">void balance(Node*&amp;root)&#123;</span><br><span class="line">    // 如果是top点，没有father/grandfather需要单独讨论，因为可能是红点做top点</span><br><span class="line">    if(root-&gt;f==NULL)&#123;</span><br><span class="line">        root-&gt;br=black;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(root-&gt;br==black)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if(root-&gt;f-&gt;br==red)&#123;</span><br><span class="line">        // Need to deal with this situation.</span><br><span class="line">        // first decide you are in which side(l/r). there will be two choice and four cases.</span><br><span class="line">        if(root-&gt;f-&gt;f-&gt;l&amp;&amp;root-&gt;f-&gt;f-&gt;r&amp;&amp;root-&gt;f-&gt;f-&gt;l-&gt;br==red&amp;&amp;root-&gt;f-&gt;f-&gt;r-&gt;br==red)&#123;</span><br><span class="line">            // balance1 , p=red , uncle=red</span><br><span class="line">            root-&gt;f-&gt;f-&gt;br=red;</span><br><span class="line">            root-&gt;f-&gt;f-&gt;l-&gt;br=black;</span><br><span class="line">            root-&gt;f-&gt;f-&gt;r-&gt;br=black;</span><br><span class="line">            balance(root-&gt;f-&gt;f);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            // balance2, p(left)=red , uncle=black/NULL</span><br><span class="line">            if(root-&gt;f-&gt;f-&gt;r==NULL||root-&gt;f-&gt;f-&gt;r-&gt;br==black)&#123;</span><br><span class="line">                // right turn</span><br><span class="line">                Node*pP=root-&gt;f-&gt;f;</span><br><span class="line">                Node*p=root-&gt;f;</span><br><span class="line">                if(root-&gt;f-&gt;num&gt;root-&gt;num)&#123;</span><br><span class="line">                    p-&gt;br=black;</span><br><span class="line">                    pP-&gt;br=red;</span><br><span class="line">                    right_turn(root);</span><br><span class="line">                    balance(root-&gt;f);</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    root-&gt;br=black;</span><br><span class="line">                    pP-&gt;br=red;                    </span><br><span class="line">                    // adjust</span><br><span class="line">                    if(root-&gt;l)&#123;</span><br><span class="line">                        root-&gt;l-&gt;f=root-&gt;f;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p-&gt;r=root-&gt;l;</span><br><span class="line">                    pP-&gt;l=root;</span><br><span class="line">                    root-&gt;f=pP;</span><br><span class="line">                    root-&gt;l=p;</span><br><span class="line">                    p-&gt;f=root;</span><br><span class="line">                    right_turn(root-&gt;l);</span><br><span class="line">                    balance(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // balance3 , p(right)=red , uncle(left)=black/NULL</span><br><span class="line">            else&#123;   // warm up</span><br><span class="line">                Node*pP=root-&gt;f-&gt;f;</span><br><span class="line">                Node*p=root-&gt;f;</span><br><span class="line">                //left turn</span><br><span class="line">                if(root-&gt;f-&gt;num&gt;root-&gt;num)&#123;</span><br><span class="line">                    root-&gt;br=black;</span><br><span class="line">                    pP-&gt;br=red;                    </span><br><span class="line">                    // adjust</span><br><span class="line">                    pP-&gt;r=root;</span><br><span class="line">                    p-&gt;f=root;</span><br><span class="line">                    root-&gt;f=pP;</span><br><span class="line">                    Node*t=root;</span><br><span class="line">                    // 为了防止root被误置为NULL,出此下策保留该root指针</span><br><span class="line">                    p-&gt;l=root-&gt;r; // bug p-&gt;l(指向root的左指针)=root-&gt;r 变成了 root=root-&gt;r</span><br><span class="line">                    </span><br><span class="line">                    root=t;</span><br><span class="line">                    root-&gt;r=p;</span><br><span class="line">                    left_turn(root-&gt;r);</span><br><span class="line">                    balance(root);</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    p-&gt;br=black;</span><br><span class="line">                    pP-&gt;br=red;                    </span><br><span class="line">                    left_turn(root);</span><br><span class="line">                    balance(root-&gt;f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Node* leave=NULL;</span><br><span class="line">Node* insert(Node*&amp;root,int num)&#123;</span><br><span class="line">    if(root==NULL)&#123;       </span><br><span class="line">        Node *node=new Node();</span><br><span class="line">        node-&gt;num=num;</span><br><span class="line">        node-&gt;br=red;</span><br><span class="line">        if(node-&gt;length==0)&#123;</span><br><span class="line">            // root必须为black</span><br><span class="line">            node-&gt;length=1;</span><br><span class="line">            node-&gt;br=black;</span><br><span class="line">        &#125;</span><br><span class="line">        root=node;</span><br><span class="line">        leave=root;</span><br><span class="line">        return node;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(root-&gt;num&gt;num)&#123;</span><br><span class="line">        root-&gt;l=insert(root-&gt;l,num);</span><br><span class="line">        root-&gt;l-&gt;f=root;      </span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        root-&gt;r=insert(root-&gt;r,num);</span><br><span class="line">        root-&gt;r-&gt;f=root;      </span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br><span class="line">// 打印看看结构</span><br><span class="line">void print(Node*root)&#123;</span><br><span class="line">    if(root==NULL)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;root-&gt;num&lt;&lt;&quot;  color: &quot;&lt;&lt;(root-&gt;br==black?&quot;black&quot;:&quot;red&quot;)&lt;&lt;endl;</span><br><span class="line">    print(root-&gt;l);</span><br><span class="line">    print(root-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">  int i,j,input,k;</span><br><span class="line">  int p,e;</span><br><span class="line">  Node*root=NULL;</span><br><span class="line">  freopen(&quot;inputs.txt&quot;,&quot;r+&quot;,stdin);</span><br><span class="line">  cin&gt;&gt;p;</span><br><span class="line">  for(i=0;i&lt;p;i++)&#123;</span><br><span class="line">      cin&gt;&gt;e;</span><br><span class="line">      insert(root,e);</span><br><span class="line">      balance(leave);</span><br><span class="line">      root-&gt;length++; </span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;&quot;preorder :\n&quot;;</span><br><span class="line">  print(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">7</span><br><span class="line">5 7 1 4 6 3 2</span><br><span class="line"></span><br><span class="line">5  color: black</span><br><span class="line">3  color: red</span><br><span class="line">1  color: black</span><br><span class="line">2  color: red</span><br><span class="line">4  color: black</span><br><span class="line">7  color: black</span><br><span class="line">6  color: red</span><br><span class="line"></span><br><span class="line">6 7 0 4 5 2 1</span><br><span class="line"></span><br><span class="line">6  color: black</span><br><span class="line">4  color: red</span><br><span class="line">1  color: black</span><br><span class="line">0  color: red</span><br><span class="line">2  color: red</span><br><span class="line">5  color: black</span><br><span class="line">7  color: black</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><blockquote><p>树的删除：（警惕黑）</p></blockquote><p>在红黑树中，删除一个节点往大的说，只有以下四种情况。</p><p>情况一：删除的节点的左、右子树都非空；</p><p>情况二：删除的节点的左子树为空树，右子树非空；</p><p>情况三：删除的节点的右子树为空树，左子树非空；</p><p>情况四：删除的节点的左、右子树都为空树；</p><p>其中情况一，可以按与其他二叉搜索树的删除方式一样处理，最终可以转换到后面的三种情况。具体为：找到(Old)D节点的直接后继节点(暂且称为X节点)，然后将X的值转移到D节点，最后将X节点作为真正要被删除掉的节点(即：(Real)D节点)。这样删除操作后，可以保证该树仍然为一棵二叉搜索树。但这样删除(Real)D节点后，可能会破坏红黑树的性质。所以需要额外做一些调整处理，这便是下面将要详细讨论的内容。</p><p>说明：下文中所提到的D，除非有特别说明，否则都将指的是(Real)D（一般可以认为该RealD节点的左子树为空，OldD不一定），最终要删除的节点一般是OldD的右节点或者右节点的最前面的一个左节点，当然也可能无右节点只能删自己。</p><hr><p><img src="\images\pasted-21.png" alt="upload successful"></p><h4 id="删除的类别可以分为几种："><a href="#删除的类别可以分为几种：" class="headerlink" title="删除的类别可以分为几种："></a>删除的类别可以分为几种：</h4><blockquote><p>（1）首先 ，从当前点D和DR之间的颜色顺序看。</p></blockquote><p>&lt; 1 &gt; 红-&gt;黑/NULL ，P肯定为黑 ， 直接删掉红，用黑（NULL）替换。</p><p><img src="\images\pasted-22.png" alt="upload successful"></p><p>&lt; 2 &gt; 黑-&gt;红 ，直接拿红替换黑，然后红变黑。</p><p><img src="\images\pasted-23.png" alt="upload successful"></p><p>&lt; 3 &gt; 黑-&gt;黑 / NULL ， 情况变得复杂。</p><blockquote><p>（2）然后 ，根据uncle的颜色再分一次情况讨论：</p></blockquote><p>&lt; 1 &gt; 如果uncle是红，那就很容易了。因为P不可能是红只能是黑，只有一种情况。</p><p><img src="\images\pasted-29.png" alt="upload successful"></p><p><img src="\images\pasted-30.png" alt="upload successful"></p><p>&lt; 2 &gt; uncle为黑时，特别复杂。</p><ul><li>1.SL=红，uncle=黑，P=黑/红，SR=黑/红</li></ul><p>将S右旋转时，接着将SL改为P的颜色，P的颜色改为黑色(用这个黑色来填补DR分支的黑节点数)，将P左旋转。</p><p><img src="\images\pasted-31.png" alt="upload successful"></p><ul><li>2.SR=红，P=黑/红，SL=黑/红</li></ul><p><img src="\images\pasted-32.png" alt="upload successful"></p><ul><li>3.S=黑，P=红，SL=SR=黑（处理简单，只要变色）</li></ul><p><img src="\images\pasted-33.png" alt="upload successful"></p><ul><li>4.SR=SL=黑，P=黑（处理简单，只要变色）</li></ul><p><img src="\images\pasted-34.png" alt="upload successful"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kd树</title>
      <link href="/2019/10/01/d/"/>
      <url>/2019/10/01/d/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="kd树："><a href="#kd树：" class="headerlink" title="kd树："></a>kd树：</h2><p>计算时采用线性扫描的方式O(n^2)，效率奇低。采用平衡二叉树的方法存储各个点，用中位数做分割，划分左右区间，并进行以x-y轴为中心进行交替选择。</p><p><img src="\images\pasted-11.png" alt="（2，4.5）"></p><p><img src="\images\pasted-12.png" alt="（2.1，3.1）"></p><blockquote><p>算法复杂度：</p></blockquote><p>构建：O(log2n)<br>插入：O(log n)<br>删除：O(log n)<br>查询：平均情况下 O(log n) ，最好情况 O(1)，最坏情况O(n)</p><hr><blockquote><ol><li>构建kd树：</li></ol></blockquote><p>（1）按y排序，抽取其中的中位数（向上取整）对应的点，axis代表的维自增。每个node保留一个指针指向父节点。</p><ul><li>怎么确定split域的首先该取的值（先划分x轴还是y轴）？</li></ul><p>分别计算x，y方向上数据的方差得知x方向上的方差最大</p><blockquote><ol><li>搜寻确定查询点最小范围的点：</li></ol></blockquote><p>（1）先以y分割判断点A&gt;Sy，向左子树查。<br>（2）再以x分割判断B&lt;Sy，向右子树搜索。</p><blockquote><ol><li>while查找二维空间里的最近点。</li></ol></blockquote><p>如果点非空而且栈非空（在根节点退到root-&gt;f即空节点而且栈为空（叶节点情况下一般栈非空））退出。<br>（1）如果 minr &lt; r(当前点，搜索点)，则无需查找另外一侧的子节点。r=r-&gt;f<br>（2）如果minr &gt; r(当前点，搜索点)，则去另一侧的子节点找找看。r=r-&gt;l/r（看你搜索点在线的哪一侧（根据x/y相对大小），取反方向即可），同时，stack记录r。<br>（3）当r==NULL，触底回退到stack为空（保留stack[0]），然后r=r-&gt;f（会不会重新陷回r-&gt;l/r ？不会左边的minr可能值都遍历了，所以会使r指向另一侧，等栈pop回到原点时又毫不留情r=r-&gt;f）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int splits=0;</span><br><span class="line">// 维数</span><br><span class="line">int now_axis=0;</span><br><span class="line">// 当前所在维数</span><br><span class="line">class kd_tree&#123;</span><br><span class="line">    public:</span><br><span class="line">    vector&lt;float&gt;point;</span><br><span class="line">    // (x,y,z...)</span><br><span class="line">    float range;</span><br><span class="line">    // x&lt;range and x&gt;range</span><br><span class="line">    int split;</span><br><span class="line">    // x,y,z....轴标记</span><br><span class="line">    kd_tree*l;</span><br><span class="line">    kd_tree*r;</span><br><span class="line">    kd_tree*f;</span><br><span class="line">    kd_tree()&#123;</span><br><span class="line">        l=NULL;</span><br><span class="line">        r=NULL;</span><br><span class="line">        f=NULL;</span><br><span class="line">        range=0;</span><br><span class="line">        split=0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">kd_tree* insert(kd_tree*root,vector&lt;float&gt;v,int split)&#123;</span><br><span class="line">    if(root==NULL)&#123;</span><br><span class="line">        root=new kd_tree();</span><br><span class="line">        root-&gt;point.assign(v.begin(),v.end());</span><br><span class="line">        root-&gt;split=split;</span><br><span class="line">        root-&gt;range=v[split];</span><br><span class="line">        root-&gt;point.assign(v.begin(),v.end());</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        if(v[root-&gt;split]&gt;root-&gt;range)&#123;</span><br><span class="line">            root-&gt;r=insert(root-&gt;r,v,split);</span><br><span class="line">            root-&gt;r-&gt;f=root;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(v[root-&gt;split]&lt;root-&gt;range)&#123;</span><br><span class="line">            root-&gt;l=insert(root-&gt;l,v,split);</span><br><span class="line">            root-&gt;l-&gt;f=root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br><span class="line">// 排序用</span><br><span class="line">bool cmp(vector&lt;float&gt;a,vector&lt;float&gt;b)&#123;</span><br><span class="line">    return a[now_axis]&lt;b[now_axis];</span><br><span class="line">&#125;</span><br><span class="line">// 初始化必须集齐所有数据</span><br><span class="line">void init(kd_tree*&amp;root,vector&lt;vector&lt;float&gt;&gt;v,int left,int right,int split)&#123;</span><br><span class="line">    if(left&gt;right)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    now_axis=split%splits;</span><br><span class="line">    </span><br><span class="line">    sort(v.begin()+left,v.begin()+right+1,cmp);</span><br><span class="line"></span><br><span class="line">    int middle=(left+right+1)/2;</span><br><span class="line">    // +1是向上取整，不加是向下取整</span><br><span class="line">    root=insert(root,v[middle],now_axis);</span><br><span class="line">    init(root,v,left,middle-1,split+1);</span><br><span class="line">    init(root,v,middle+1,right,split+1);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">int choose_split(vector&lt;vector&lt;float&gt;&gt;v)&#123;</span><br><span class="line">    int i,j;</span><br><span class="line">    vector&lt;float&gt;ave(splits);</span><br><span class="line">    for(i=0;i&lt;splits;i++)&#123;</span><br><span class="line">        float sum=0;</span><br><span class="line">        for(j=0;j&lt;v.size();j++)&#123;</span><br><span class="line">            sum+=v[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">        ave[i]=sum/float(v.size());</span><br><span class="line">    &#125;</span><br><span class="line">    int ans=0;</span><br><span class="line">    float maxd=0;</span><br><span class="line">    for(i=0;i&lt;splits;i++)&#123;</span><br><span class="line">        float sumd=0;</span><br><span class="line">        for(j=0;j&lt;v.size();j++)&#123;</span><br><span class="line">            sumd+=(v[j][i]-ave[i])*(v[j][i]-ave[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        if(sumd&gt;maxd)&#123;</span><br><span class="line">            ans=i;</span><br><span class="line">            maxd=sumd;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">kd_tree* find_range(kd_tree*root,vector&lt;float&gt;&amp;v)&#123;</span><br><span class="line">    if(root-&gt;point[root-&gt;split]&gt;v[root-&gt;split])&#123;</span><br><span class="line">        if(root-&gt;l==NULL)&#123;</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            find_range(root-&gt;l,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(root-&gt;point[root-&gt;split]&lt;v[root-&gt;split])&#123;</span><br><span class="line">        if(root-&gt;r==NULL)&#123;</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            find_range(root-&gt;r,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void preorder(kd_tree*root)&#123;</span><br><span class="line">    if(root==NULL)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;root-&gt;point[0]&lt;&lt;&quot;,&quot;&lt;&lt;root-&gt;point[1]&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;(root-&gt;split==0?&quot;x&quot;:&quot;y&quot;)&lt;&lt;&quot;:&quot;&lt;&lt;root-&gt;range&lt;&lt;endl;</span><br><span class="line">    preorder(root-&gt;l);</span><br><span class="line">    preorder(root-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line">// 最小半径的平方</span><br><span class="line">float minr=0x7fffffff;</span><br><span class="line">kd_tree* find_nearest_node(kd_tree*root,vector&lt;float&gt;&amp;v)&#123;</span><br><span class="line">    if(root==NULL)&#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    kd_tree*ans=root;</span><br><span class="line">    vector&lt;kd_tree*&gt;list;</span><br><span class="line">    while(!(root==NULL)||!list.empty())&#123;</span><br><span class="line">        // if(root)&#123;</span><br><span class="line">        //     打印路径</span><br><span class="line">        //     cout&lt;&lt;root-&gt;point[0]&lt;&lt;&quot; &quot;&lt;&lt;root-&gt;point[1]&lt;&lt;endl;</span><br><span class="line">        // &#125;</span><br><span class="line">        if(root==NULL)&#123;                </span><br><span class="line">            root=list[0];</span><br><span class="line">            while(!list.empty())&#123;</span><br><span class="line">                list.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">            root=root-&gt;f;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            int i=0;</span><br><span class="line">            float r_now=0;</span><br><span class="line">            // calc the distance^2</span><br><span class="line"></span><br><span class="line">            for(i=0;i&lt;splits;i++)&#123;</span><br><span class="line">                r_now+=(root-&gt;point[i]-v[i])*(root-&gt;point[i]-v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            if(r_now&lt;minr)&#123;</span><br><span class="line">                // current point is much more near</span><br><span class="line">                minr=r_now;</span><br><span class="line">                ans=root;</span><br><span class="line">            &#125;</span><br><span class="line">            if((root-&gt;point[root-&gt;split]-v[root-&gt;split])*(root-&gt;point[root-&gt;split]-v[root-&gt;split])&gt;=minr)&#123;</span><br><span class="line">                // if the cirle which based on the radius between current point and the point to be searched</span><br><span class="line">                // doesn&apos;t intersect with the straight line(x=...,y=...), then search the father side; </span><br><span class="line">                root=root-&gt;f;</span><br><span class="line">                if(!list.empty())&#123;</span><br><span class="line">                    list.pop_back();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                list.push_back(root);</span><br><span class="line">                // or turn to the other side of </span><br><span class="line">                if(v[root-&gt;split]&lt;root-&gt;point[root-&gt;split])&#123;</span><br><span class="line">                    root=root-&gt;r;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    root=root-&gt;l;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    freopen(&quot;inputs.txt&quot;,&quot;r+&quot;,stdin);</span><br><span class="line">    int length;</span><br><span class="line">    int i,j,x;</span><br><span class="line">    vector&lt;vector&lt;float&gt;&gt;v;</span><br><span class="line">    kd_tree* root=NULL;</span><br><span class="line">    cin&gt;&gt;length;</span><br><span class="line">    cin&gt;&gt;splits;</span><br><span class="line">    for(i=0;i&lt;length;i++)&#123;</span><br><span class="line">        vector&lt;float&gt;vv;</span><br><span class="line">        for(j=0;j&lt;splits;j++)&#123;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            vv.push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">        v.push_back(vv);</span><br><span class="line">    &#125;</span><br><span class="line">    int left=0,right=v.size()-1,split;</span><br><span class="line"></span><br><span class="line">    split=choose_split(v);</span><br><span class="line">    // choose the largest D(..) to define x/y/z as the start axis.</span><br><span class="line"></span><br><span class="line">    init(root,v,left,right,split);</span><br><span class="line">    // init the b-tree.</span><br><span class="line"></span><br><span class="line">    if(root==NULL)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;failed&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;float&gt;vvv=&#123;2,4.5&#125;;</span><br><span class="line">    // point to be search.</span><br><span class="line"></span><br><span class="line">    kd_tree*r=find_range(root,vvv);</span><br><span class="line">    // return the range define node.</span><br><span class="line">    </span><br><span class="line">    r=find_nearest_node(r,vvv);</span><br><span class="line">    // return the answer node</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;(split==0?&quot;x&quot;:&quot;y&quot;)&lt;&lt;&quot; as the firat axis.&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;\nr^2: &quot;&lt;&lt;minr&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;\nanswer node: (&quot;&lt;&lt;r-&gt;point[0]&lt;&lt;&quot;,&quot;&lt;&lt;r-&gt;point[1]&lt;&lt;&quot;)&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">2</span><br><span class="line">2 3</span><br><span class="line">4 7</span><br><span class="line">5 4</span><br><span class="line">7 2</span><br><span class="line">8 1</span><br><span class="line">9 6</span><br><span class="line"></span><br><span class="line">(5,4)</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感知机</title>
      <link href="/2019/08/15/%E6%84%9F%E7%9F%A5%E6%9C%BA/"/>
      <url>/2019/08/15/%E6%84%9F%E7%9F%A5%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<hr><p>感知机是二分类的线性模型，其输入是实例的特征向量，输出的是事例的类别，分别是+1和-1，属于判别模型。假设训练数据集是线性可分的，感知机学习的目标是求得一个能够将训练数据集正实例点和负实例点完全正确分开的分离超平面。如果是非线性可分的数据，则最后无法获得超平面</p><p><img src="\images\pasted-10.png" alt="分类效果"></p><p>点到线的距离公式：</p><p>$d=\frac{Ax_0+By_0+C}{\sqrt{A^2+B^2}}$</p><p>假设有一超平面，h=w*x+b，其中w=（w0，w1…wm），x=（x0，x1…xm），样本x’到超平面的距离为：</p><p>$d=\frac{w*x’+b}{||w||}$</p><hr><p>输出的模型如下：</p><p>$f(x)=sign(w*x+b)$</p><p>$sign(x)=\begin{cases} 1 \quad\quad\quad x&gt;0<br> -1 \quad\quad\quad x\leq0\end{cases}$</p><p>如果 $ \frac{w\star x’+b}{||w||}&gt;0 $，则y=1。如果&lt;0，则y=-1。这样分类正确的话 $y*\frac{w\star x’+b}{||w||}&gt;0$ 恒成立（||w||是L2范数）</p><hr><h5 id="损失函数："><a href="#损失函数：" class="headerlink" title="损失函数："></a>损失函数：</h5><p>$L(w,b)=-\frac{1}{||w||}\sum_{x_i \in M}y_i(w*x_i+b)$（M集合是误分类点的集合）</p><p>当然因为||$w$||&gt;0所以我们可以去掉它</p><p>$L(w,b)=-\sum_{x_i \in M}y_i(w*x_i+b)$</p><p>感知机分类的最终目的是让最终值=0，所以少除也无所谓，还能降低计算量。(所以有个前提：能收敛到0)</p><hr><h5 id="随机梯度下降算法"><a href="#随机梯度下降算法" class="headerlink" title="随机梯度下降算法"></a>随机梯度下降算法</h5><p>用普通的基于所有样本的梯度和的均值的批量梯度下降法（BGD）是行不通的，原因在于我们的损失函数里面有限定，只有误分类的M集合里面的样本才能参与损失函数的优化。所以我们不能用最普通的批量梯度下降,只能采用随机梯度下降（SGD）</p><p>$\nabla_wL(w,b)=-\sum_{x_i \in M}y_i*x_i$</p><p>$\nabla_bL(w,b)=-\sum_{x_i \in M}y_i$</p><p>$w \gets w+\eta<em>y_i</em>x_i$</p><p>$b \gets b+\eta*y_i$</p><ul><li>xi实际上是(x,y)，yi实际上是{-1，1}，$\eta$是步长。</li></ul><hr><h4 id="计算过程："><a href="#计算过程：" class="headerlink" title="计算过程："></a>计算过程：</h4><ol><li>获取{-1，1}对应的点，初始化w矩阵和b变量的值。</li><li>正确分类的不用管，不正确分类的利用梯度对w和b的值进行更新。</li><li>循环带入所有的点，直到满足要求。</li></ol><pre><code>例：点x1=（3，3），w0=0，b0=0，y1=1，步长为11. y1*（w0*x1+b0）=0，分类错误。2. w1=w0+y1*x1=(3，3)^T，b1=b0+y1=13. 得到线性模型 f（x）=sign（3x+3y+1）(只输出在线的哪一侧)</code></pre><hr><p><img src="\images\pasted-11.gif" alt="线性可分"></p><p><img src="\images\pasted-12.gif" alt="线性不可分"></p><hr><h4 id="对偶形式算法："><a href="#对偶形式算法：" class="headerlink" title="对偶形式算法："></a>对偶形式算法：</h4><p>对偶形式的目的是降低运算量，但是并不是在任何情况下都能降低运算量，而是在特征空间的维度很高时才起到作用。</p><blockquote><p>原：</p></blockquote><p>$w \gets w+\eta<em>y_i</em>x_i$</p><p>$b \gets b+\eta*y_i$</p><blockquote><p>现：</p></blockquote><p>初始值为（0，0）的w和b经过了n次修改后：（$a_i=n_i\eta$）</p><p>$w=\sum_{i=1}^na_iy_ix_i$</p><p>$b=\sum_{i=1}^na_iy_i$</p><p>$sign（w<em>x+b）$，将$w=\sum_{i=1}^na_iy_ix_i$带入得$f(x)=\sum_{i=1}^na_iy_ix_i</em>xj+b$</p><ul><li>第n-1次的参数$a_i$在第2(n-1)轮要再加$\eta$，所以参数$a_i$越大，说明该点位于分割线附近，在更新的时候容易受影响难以正确分类。$a_i$默认初始为0</li></ul><p>$a_i \gets a_i+\eta$    </p><p>$b \gets b+\eta y_i$</p><hr><h4 id="加速的设计："><a href="#加速的设计：" class="headerlink" title="加速的设计："></a>加速的设计：</h4><p>gram矩阵，$G=[x_i<em>x_j]_{N</em>N}$</p><hr><p>很可惜，因为不能解决异或问题躺尸了很多年。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>new和malloc的区别</title>
      <link href="/2019/08/14/new%E5%92%8Cmalloc%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/08/14/new%E5%92%8Cmalloc%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="new与malloc的区别"><a href="#new与malloc的区别" class="headerlink" title="new与malloc的区别?"></a>new与malloc的区别?</h4><p>（1）申请的内存所在位置:<br>new操作符从自由存储区上为对象动态分配内存空间，而malloc函数从堆上动态分配内存。自由存储区是C++基于new操作符的一个抽象概念，凡是通过new操作符进行内存申请，该内存即为自由存储区。而堆是操作系统中的术语，是操作系统所维护的一块特殊内存，用于程序的内存动态分配，C语言使用malloc从堆上分配内存，使用free释放已分配的对应内存。</p><p>那么自由存储区是否能够是堆，这取决于operator new 的实现细节。自由存储区不仅可以是堆，还可以是静态存储区，这都看operator new在哪里为对象分配内存。</p><p><code>在C++中，内存区分为5个区，分别是堆、栈、自由存储区、全局/静态存储区、常量存储区</code>，但是new其实是对malloc的封装，所以只是逻辑上有所区别….</p><p>（2）返回类型安全性：<br>new操作符内存分配成功时，返回的是对象类型的指针，无须进行类型转换，故new是符合类型安全性的操作符。而malloc内存分配成功则是返回void <em> ，需要通过强制类型转换将void</em>指针转换成我们需要的类型。</p><p>（3）是否调用构造函数/析构函数：<br>使用new操作符来分配对象内存时会经历三个步骤：<br>第一步：调用operator new 函数（对于数组是operator new[]）分配一块足够大的，原始的，未命名的内存空间以便存储特定类型的对象。<br>第二步：编译器运行相应的构造函数以构造对象，并为其传入初值。<br>第三部：对象构造完成后，返回一个指向该对象的指针。</p><p>使用delete操作符来释放对象内存时会经历两个步骤：<br>第一步：调用对象的析构函数。<br>第二步：编译器调用operator delete(或operator delete[])函数释放内存空间。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 操作系统底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 操作系统底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存垃圾管理（智能指针）</title>
      <link href="/2019/08/14/%E5%9E%83%E5%9C%BE%E7%AE%A1%E7%90%86%EF%BC%88%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%EF%BC%89/"/>
      <url>/2019/08/14/%E5%9E%83%E5%9C%BE%E7%AE%A1%E7%90%86%EF%BC%88%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>智能指针：<br><a href="https://blog.csdn.net/u012501459/article/details/48229399">https://blog.csdn.net/u012501459/article/details/48229399</a></p></blockquote><p>C++11中引入了智能指针的概念。使用普通指针，容易造成堆内存泄露（忘记释放），二次释放，使用智能指针能更好的管理堆内存。</p><ul><li>构造函数中创建类的新对象时，初始化引用计数为1；</li><li>拷贝构造函数复制指针，并使相应的引用计数增加1；</li><li>赋值操作减少左操作数所值对象的引用计数，增加右操作数所指对象的引用计数；</li><li>析构函数使引用计数减少1，并且当引用计数为0时，释放指针说指向的对象；</li></ul><p><img src="\images\pasted-9.png" alt="upload successful"></p><h4 id="Ref-ptr类："><a href="#Ref-ptr类：" class="headerlink" title="Ref_ptr类："></a>Ref_ptr类：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//使用int*指针初始化ptr，注意必须要放在初始化列表中</span><br><span class="line">Ref_ptr(int * i):ptr(new Referenced(i))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//拷贝构造函数，又有一个变量指向了这块内存</span><br><span class="line">Ref_ptr(const Ref_ptr &amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    ptr=rhs.ptr;//将右操作数的引用计数对象赋值给左操作数</span><br><span class="line">    ptr-&gt;ref();//将它们的应用计数加1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ref_ptr r1=new int(4); //调用构造函数</span><br><span class="line">Ref_ptr r2=r1; //调用拷贝构造函数</span><br></pre></td></tr></table></figure><p><img src="\images\pasted-8.png" alt="upload successful"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//赋值操作符，右操作数的引用计数要减1，左操作数的引用计数要加1</span><br><span class="line">Ref_ptr &amp; operator=(const Ref_ptr &amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    if(&amp;rhs==this)</span><br><span class="line">        return *this;</span><br><span class="line">    if(ptr-&gt;unref()==0)//赋值操作符，首先将当前类的引用计数减1，因为现在指向它的指针少了一个。</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;delete Ref_ptr&quot;&lt;&lt;endl;</span><br><span class="line">        delete ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    ptr=rhs.ptr; //将右操作数的引用计数赋值给当前对象</span><br><span class="line">    ptr-&gt;ref(); //引用计数加1</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//析构函数，引用计数要减1，如果减为0，删除这块内存</span><br><span class="line">~Ref_ptr()</span><br><span class="line">&#123;</span><br><span class="line">    if(ptr-&gt;unref()==0)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;delete Ref_ptr&quot;&lt;&lt;endl;</span><br><span class="line">        delete ptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Referenced类："><a href="#Referenced类：" class="headerlink" title="Referenced类："></a>Referenced类：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//初始化这个类，引用计数设为1，并且将p指向传入的地址</span><br><span class="line">Referenced(int * pi)</span><br><span class="line">&#123;</span><br><span class="line">    refCount=1;</span><br><span class="line">    p=pi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//引用计数加1</span><br><span class="line">int ref()</span><br><span class="line">&#123;</span><br><span class="line">    return ++refCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//引用计数减1</span><br><span class="line">int unref()</span><br><span class="line">&#123;</span><br><span class="line">    return --refCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//析构函数，释放掉内存</span><br><span class="line">~Referenced()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;delete referenced&quot;&lt;&lt;endl;</span><br><span class="line">    delete p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h4><ul><li>智能指针能够帮助我们处理资源泄露问题；</li><li>它也能够帮我们处理空悬指针的问题；</li><li>它还能够帮我们处理比较隐晦的由异常造成的资源泄露。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL里的四种智能指针auto_ptr,scoped_ptr,shared_ptr,weak_ptr</title>
      <link href="/2019/08/14/L%E9%87%8C%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88-auto-ptr%E3%80%81scoped-ptr%E3%80%81shared-ptr%E3%80%81weak-ptr/"/>
      <url>/2019/08/14/L%E9%87%8C%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88-auto-ptr%E3%80%81scoped-ptr%E3%80%81shared-ptr%E3%80%81weak-ptr/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>基于安全考虑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_ptr&lt; string&gt; ps (new string (&quot;I reigned lonely as a cloud.”）;</span><br><span class="line">auto_ptr&lt;string&gt; vocation; </span><br><span class="line">vocaticn = ps;</span><br></pre></td></tr></table></figure></p></blockquote><p>因为程序将试图删除同一个对象两次，要避免这种问题，方法有多种：</p><p>（1）定义赋值运算符，使之执行深复制。这样两个指针将指向不同的对象，其中的一个对象是另一个对象的副本，缺点是浪费空间，所以智能指针都未采用此方案。</p><p>（2）建立所有权概念。对于特定的对象，只能有一个智能指针可拥有，这样只有拥有对象的智能指针的析构函数会删除该对象。然后让赋值操作转让所有权。这就是用于auto_ptr和unique_ptr 的策略，但unique_ptr的策略更严格。</p><p>（3）创建智能更高的指针，跟踪引用特定对象的智能指针数。这称为引用计数。例如，赋值时，计数将加1，而指针过期时，计数将减1,。当减为0时才调用delete。这是shared_ptr采用的策略。</p><hr><h2 id="1-unique-ptr："><a href="#1-unique-ptr：" class="headerlink" title="1. unique_ptr："></a>1. unique_ptr：</h2><p>unique_ptr由C++11引入，旨在替代不安全的auto_ptr。<br>unique_ptr不共享它的所管理的对象。它无法复制到其他unique_ptr，无法通过值传递到函数，也无法用于需要副本的任何标准模板库 （STL）算法。只能移动 unique_ptr，即对资源管理权限可以实现转移。</p><p><img src="\images\pasted-7.png" alt="upload successful"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//智能指针的创建  </span><br><span class="line">unique_ptr&lt;int&gt; u_i; //创建空智能指针</span><br><span class="line">u_i.reset(new int(3)); //&quot;绑定”动态对象  </span><br><span class="line">unique_ptr&lt;int&gt; u_i2(new int(4));//创建时指定动态对象</span><br><span class="line">unique_ptr&lt;T,D&gt; u(d);//创建空unique_ptr,执行类型为T的对象，用类型为D的对象d来替代默认的删除器delete</span><br><span class="line"></span><br><span class="line">//所有权的变化  </span><br><span class="line">int *p_i = u_i2.release(); //释放所有权  </span><br><span class="line">unique_ptr&lt;string&gt; u_s(new string(&quot;abc&quot;));  </span><br><span class="line">unique_ptr&lt;string&gt; u_s2 = std::move(u_s); //所有权转移(通过移动语义)，u_s所有权转移后，变成“空指针” </span><br><span class="line">u_s2.reset(u_s.release());//所有权转移</span><br><span class="line">u_s2=nullptr;//显式销毁所指对象，同时智能指针变为空指针。与u_s2.reset()等价</span><br></pre></td></tr></table></figure></p><h2 id="2-auto-ptr：为什么不用它而用unique-ptr"><a href="#2-auto-ptr：为什么不用它而用unique-ptr" class="headerlink" title="2.auto_ptr：为什么不用它而用unique_ptr"></a>2.auto_ptr：为什么不用它而用unique_ptr</h2><p>使用unique_ptr时编译出错，与auto_ptr一样，unique_ptr也采用所有权模型，但在使用unique_ptr时，程序不会等到运行阶段崩溃，而在编译期因下述代码行出现错误。一句话总结就是：避免因潜在的内存问题导致程序崩溃。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">auto_ptr&lt;string&gt; films[5] =&#123;</span><br><span class="line">auto_ptr&lt;string&gt; (new string(&quot;Fowl Balls&quot;)),</span><br><span class="line">auto_ptr&lt;string&gt; (new string(&quot;Duck Walks&quot;)),</span><br><span class="line">auto_ptr&lt;string&gt; (new string(&quot;Chicken Runs&quot;)),</span><br><span class="line">auto_ptr&lt;string&gt; (new string(&quot;Turkey Errors&quot;))</span><br><span class="line">&#125;;</span><br><span class="line">    auto_ptr&lt;string&gt; pwin;</span><br><span class="line">    pwin = films[2]; </span><br><span class="line">    // films[2] loses ownership. 将所有权从films[2]转让给pwin，此时films[2]不再引用该字符串从而变成空指针</span><br><span class="line"></span><br><span class="line">for(int i = 0; i &lt; 4; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *films[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上面可见，unique_ptr比auto_ptr更加安全，因为auto_ptr有拷贝语义，拷贝后原象变得无效，再次访问原对象时会导致程序崩溃；unique_ptr则禁止了拷贝语义，但提供了移动语义，即可以使用std::move()进行控制权限的转移<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unique_ptr&lt;string&gt; upt(new string(&quot;lvlv&quot;));</span><br><span class="line">unique_ptr&lt;string&gt; upt1(upt);//编译出错，已禁止拷贝</span><br><span class="line">unique_ptr&lt;string&gt; upt1=upt;//编译出错，已禁止拷贝</span><br><span class="line">unique_ptr&lt;string&gt; upt1=std::move(upt);  //控制权限转移，正确的写法</span><br><span class="line"></span><br><span class="line">auto_ptr&lt;string&gt; apt(new string(&quot;lvlv&quot;));</span><br><span class="line">auto_ptr&lt;string&gt; apt1(apt);//编译通过</span><br><span class="line">auto_ptr&lt;string&gt; apt1=apt;//编译通过</span><br></pre></td></tr></table></figure></p><ul><li>使用shared_ptr时运行正常，因为shared_ptr采用引用计数，pwin和films[2]都指向同一块内存，在释放空间时因为事先要判断引用计数值的大小因此不会出现多次删除一个对象的错误。</li></ul><h2 id="3-shared-ptr"><a href="#3-shared-ptr" class="headerlink" title="3. shared_ptr"></a>3. shared_ptr</h2><p>参看<code>内存垃圾管理（智能指针）</code></p><h2 id="4-weak-ptr"><a href="#4-weak-ptr" class="headerlink" title="4. weak_ptr"></a>4. weak_ptr</h2><p>被设计为与shared_ptr共同工作，可以从一个shared_ptr或者另一个weak_ptr对象构造而来。</p><blockquote><p>循环引用：</p></blockquote><p>一般来讲，解除这种循环引用有下面三种可行的方法：<br>（1）当只剩下最后一个引用的时候需要手动打破循环引用释放对象。<br>（2）当parent的生存期超过children的生存期的时候，children改为使用一个普通指针指向parent。<br>（3）使用弱引用的智能指针打破这种循环引用。<br>虽然这三种方法都可行，但方法1和方法2都需要程序员手动控制，麻烦且容易出错。这里主要介绍一下第三种方法，使用弱引用的智能指针<code>std:weak_ptr</code>来打破循环引用。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>__cdecl,__stdcall,__fastcall,__pascal,__thiscall 的区别</title>
      <link href="/2019/08/14/ecl-stdcall-fastcall-pascal-thiscall-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/08/14/ecl-stdcall-fastcall-pascal-thiscall-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<hr><p>关于函数的调用规则（调用约定），大多数时候是不需要了解的，但是如果需要跨语言的编程，比如VC写的dll要delphi调用，则需要了解。</p><blockquote><p>1.__cdecl         </p></blockquote><p>__cdecl 是 C Declaration  的缩写，表示 C 语言默认的函数调用方法：所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。被调用函数不会要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。</p><blockquote><p>2.__stdcall </p></blockquote><p>__stdcall 是 Standard Call 的缩写，是 C++ 的标准调用方式：所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是 this 指针。这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retnX，X 表示参数占用的字节数，CPU 在 ret 之后自动弹出 X 个字节的堆栈空间，称为自动清栈。函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。</p><blockquote><p>3.__fastcall         </p></blockquote><p><strong>fastcall 是编译器指定的快速调用方式。由于大多数的函数参数个数很少，使用堆栈传递比较费时。因此 </strong>fastcall 通常规定将前两个（或若干个）参数由寄存器传递，其余参数还是通过堆栈传递。不同编译器编译的程序规定的寄存器不同，返回方式和 __stdcall 相当。</p><blockquote><p>4.__pascal         </p></blockquote><p><strong>pascal 是 Pascal 语言（Delphi）的函数调用方式，也可以在 C/C++ 中使用，参数压栈顺序与前两者相反。返回时的清栈方式与 </strong>stdcall 相同。</p><blockquote><p>5.__thiscall</p></blockquote><p><strong>thiscall 是为了解决类成员调用中 this 指针传递而规定的。</strong>thiscall 要求把 this 指针放在特定寄存器中，该寄存器由编译器决定。VC 使用 ecx，Borland 的 C++ 编译器使用 eax。返回方式和 __stdcall 相当。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存对齐</title>
      <link href="/2019/08/13/%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
      <url>/2019/08/13/%E5%AD%98%E5%AF%B9%E9%BD%90/</url>
      
        <content type="html"><![CDATA[<hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    int a;</span><br><span class="line">    double b;</span><br><span class="line">    short c;</span><br><span class="line">&#125;A;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    int a;</span><br><span class="line">    short b;</span><br><span class="line">    double c;</span><br><span class="line">&#125;B;</span><br></pre></td></tr></table></figure><p><code>sizeof(A)=24而sizeof(B)=16</code></p><blockquote><p>A的内存分布：(每一个元素都存在最大元素大小的空间内)</p></blockquote><p><img src="\images\pasted-5.png" alt="upload successful"></p><blockquote><p>B的内存分布：</p></blockquote><p><img src="\images\pasted-6.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 操作系统底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 操作系统底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大小端存储</title>
      <link href="/2019/08/13/%E5%B0%8F%E7%AB%AF%E5%AD%98%E5%82%A8/"/>
      <url>/2019/08/13/%E5%B0%8F%E7%AB%AF%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<hr><p>大端模式，是指数据的高字节保存在内存的低地址中。</p><p><img src="\images\pasted-4.png" alt="upload successful"><br>4个两位16进制数=8*4=32位=4B=1int</p><hr><p>编程判断大小端的两种方法：</p><ol><li>union 判断法</li></ol><p>在union中所有的数据成员共用一个空间，同一时间只能储存其中一个数据成员，所有的数据成员具有相同的起始地址。即上述的union虽然定义了两个成员，但其实这个union只占用了4个字节(32位机器中)，往a成员赋值，然后读取b就相读取a成员的低位第一个字节的值。如果机器使用大端模式，则u.a=1那a的最高字节值为1；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedef union &#123;</span><br><span class="line">int i;</span><br><span class="line">char c;</span><br><span class="line">&#125;my_union;</span><br><span class="line"> </span><br><span class="line">int checkSystem1(void)</span><br><span class="line">&#123;</span><br><span class="line">my_union u;</span><br><span class="line">u.i = 1;</span><br><span class="line">return (u.i == u.c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>直接判断法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int checkSystem2(void)</span><br><span class="line">&#123;</span><br><span class="line">int i = 0x12345678;</span><br><span class="line">char *c = (char*)&amp;i;</span><br><span class="line">return ((c[0] == 0x78) &amp;&amp; (c[1] == 0x56) &amp;&amp; (c[2] == 0x34) &amp;&amp; (c[3] == 0x12));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 操作系统底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 操作系统底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针的形参</title>
      <link href="/2019/08/13/%E6%8C%87%E9%92%88%E7%9A%84%E5%BD%A2%E5%8F%82/"/>
      <url>/2019/08/13/%E6%8C%87%E9%92%88%E7%9A%84%E5%BD%A2%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<hr><p>函数中传递的是p指针的形参（只能修改arr[1]的值，无法修改*p指向的位置）</p><p><img src="\images\pasted-3.png" alt="upload successful"></p><h4 id="p形参的情况："><a href="#p形参的情况：" class="headerlink" title="*p形参的情况："></a>*p形参的情况：</h4><ul><li>一开始:</li></ul><pre class="mermaid">graph LR    classDef className fill:white,stroke:#333,stroke-width:1px;    id3[*p 形参]-->id1[7]    subgraph arr数组    id[10]-->id1[7]    id1[7]-->id2[5]    end    subgraph *p    id3[*p 形参]    end    class id,id1,id2,id3 className;</pre><ul><li>最后:</li></ul><pre class="mermaid">graph LR    classDef className fill:white,stroke:#333,stroke-width:1px;    id4[*p]-->id1[3]    id3[*p 形参]-->id[10]    subgraph *p 形参    id3[*p 形参]    end    subgraph *p    id4[*p]    end        subgraph arr数组    id[10]-->id1[3]    id1[3]-->id2[5]    end    class id,id1,id2,id3,id4 className;</pre><ul><li>注意：<code>*p--=3</code>实际上是<code>*p=3</code>，然后<code>(p--)</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int func(int *p)&#123;</span><br><span class="line">return (*p--=3)-1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int arr[]=&#123;10,7,5&#125;;</span><br><span class="line">int *p=arr+1;</span><br><span class="line">printf(&quot;%d&quot;,func(p)+*p);</span><br><span class="line">        // 答案为5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="amp-p引用的情况："><a href="#amp-p引用的情况：" class="headerlink" title="*&amp;p引用的情况："></a>*&amp;p引用的情况：</h4><ul><li>一开始:</li></ul><pre class="mermaid">graph LR    classDef className fill:white,stroke:#333,stroke-width:1px;    id3[*&p]-->id1[7]    subgraph arr数组    id[10]-->id1[7]    id1[7]-->id2[5]    end    subgraph *&p    id3[*&p]    end    class id,id1,id2,id3 className;</pre><ul><li>最后:</li></ul><pre class="mermaid">graph LR    classDef className fill:white,stroke:#333,stroke-width:1px;    id4[*p]-->id[10]    id3[*&p]-->id[10]    subgraph *&p    id3[*&p]    end    subgraph *p    id4[*p]    end        subgraph arr数组    id[10]-->id1[3]    id1[3]-->id2[5]    end    class id,id1,id2,id3,id4 className;</pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int func(int *&amp;p)&#123;</span><br><span class="line">    return (*p--=3)-1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[]=&#123;10,7,5&#125;;</span><br><span class="line">    int *p=arr+1;</span><br><span class="line">    printf(&quot;%d&quot;,func(p)+*p);</span><br><span class="line">        // 答案为12</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#ifndef/#define/#endif</title>
      <link href="/2019/08/13/ifndef-define-endif/"/>
      <url>/2019/08/13/ifndef-define-endif/</url>
      
        <content type="html"><![CDATA[<p>在c语言中，对同一个变量或者函数进行多次声明是不会报错的。所以如果h文件里只是进行了声明工作，即使不使用# ifndef宏定义，多个c文件包含同一个h文件也不会报错。</p><p>但是在c++语言中，#ifdef的作用域只是在单个文件中。所以如果h文件里定义了全局变量，即使采用#ifdef宏定义，多个c文件包含同一个h文件还是会出现全局变量重定义的错误。</p><p>使用#ifndef可以避免下面这种错误：如果在h文件中定义了全局变量，一个c文件包含同一个h文件多次，如果不加#ifndef宏定义，会出现变量重复定义的错误；如果加了#ifndef，则不会出现这种错误。</p><p>其实“被重复引用”是指一个头文件在同一个cpp文件中被include了多次，这种错误常常是由于include嵌套造成的。比如：存在a.h文件#include “c.h”而此时b.cpp文件导入了#include “a.h” 和#include “c.h”此时就会造成c.h重复引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ifndef x                 //先测试x是否被宏定义过</span><br><span class="line">#define x</span><br><span class="line">   程序段1blabla~    //如果x没有被宏定义过，定义x，并编译程序段 1</span><br><span class="line">#endif   </span><br><span class="line">　　程序段2blabla~　　 //如果x已经定义过了则编译程序段2的语句，“忽视”程序段 1</span><br></pre></td></tr></table></figure><blockquote><p>循环引用的后果：</p></blockquote><p>有些头文件重复引用只是增加了编译工作的工作量，不会引起太大的问题，仅仅是编译效率低一些，但是对于大工程而言编译效率低下那将是一件多么痛苦的事情。</p><p>有些头文件重复包含，会引起错误，比如在头文件中定义了全局变量(虽然这种方式不被推荐，但确实是C规范允许的)这种会引起重复定义。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatile</title>
      <link href="/2019/08/13/olatile/"/>
      <url>/2019/08/13/olatile/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><p>volatile是一个类型修饰符（type specifier）volatile的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。</p><h4 id="volatile和编译器的优化有关："><a href="#volatile和编译器的优化有关：" class="headerlink" title="volatile和编译器的优化有关："></a>volatile和编译器的优化有关：</h4><p>在本次线程内，当读取一个变量时，为了提高读取速度，编译器进行优化时有时会先把变量读取到一个寄存器中；以后，再读取变量值时，就直接从寄存器中读取；当变量值在本线程里改变时，会同时把变量的新值copy到该寄存器中，以保持一致。 </p><p>当变量因别的线程值发生改变，上面寄存器的值不会相应改变，从而造成应用程序读取的值和实际的变量值不一致。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内联函数</title>
      <link href="/2019/08/13/%E8%81%94%E5%87%BD%E6%95%B0/"/>
      <url>/2019/08/13/%E8%81%94%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="函数调用原理："><a href="#函数调用原理：" class="headerlink" title="函数调用原理："></a>函数调用原理：</h4><p>执行到函数调用指令时，程序将在函数调用后立即存储该指令的内存地址，并将函数参数复制到堆栈（为此保留的内存块），跳到标记函数起点的内存单元，执行函数代码（也许还需将返回值放入寄存器中），然后跳回到地址被保存的指令处。来回跳跃并记录跳跃位置意味着以前使用函数时，需要一定的开销。</p><hr><p>内联函数提供了另一种选择。编译器将使用相应的函数代码替换函数调用。因此，内联函数的运行速度比常规函数稍快，但代价是需要占用更多内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inline double square(double x)&#123;return x*x;&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p>内联函数与宏定义的区别:</p></blockquote><p>使用宏和内联函数都可以节省在函数调用方面所带来的时间和空间开销。二者都采用了空间换时间的方式，在其调用处进行展开：<br>(1)  在预编译时期，宏定义在调用处执行字符串的原样替换。在编译时期，内联函数在调用处展开，同时进行参数类型检查。<br>(2)  内联函数首先是函数，可以像调用普通函数一样调用内联函数。而宏定义往往需要添加很多括号防止歧义，编写更加复杂。<br>(3)  内联函数可以作为某个类的成员函数，这样可以使用类的保护成员和私有成员。而当一个表达式涉及到类保护成员或私有成员时，宏就不能实现了(无法将this指针放在合适位置)。</p><p>可以用内联函数完全替代宏。<br>在编写内联函数时，函数体应该短小而简洁，不应该包含循环等较复杂结构，否则编译器不会将其当作内联函数看待，而是把它决议成为一个静态函数。</p><p>有些编译器甚至会优化内联函数，通常为避免一些不必要拷贝和构造，提高工作效率。</p><p>频繁的调用内联函数和宏定义容易造成代码膨胀，消耗更大的内存而造成过多的换页操作。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚函数</title>
      <link href="/2019/08/13/%E8%99%9A%E5%87%BD%E6%95%B0/"/>
      <url>/2019/08/13/%E8%99%9A%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/zwe7616175/article/details/81334711">https://blog.csdn.net/zwe7616175/article/details/81334711</a><br><a href="https://zhidao.baidu.com/question/123304290.html">https://zhidao.baidu.com/question/123304290.html</a></p><hr><blockquote><p>说明：</p></blockquote><p>使用虚函数，系统会有一定的空间开销。当一个类带有虚函数时，编译系统会为该类构造一个虚函数表（位于类内其他成员前面），是一个指针数组，存放每个虚函数的入口地址。系统在进行动态关联的时间开销很少，提高了多态性的效率。</p><p><img src="\images\pasted-2.png" alt="upload successful"></p><p>编译器生成的析构函数都是非虚的，除非是一个子类，其父类有个虚析构函数，此时的虚函数特性继承自基类。有虚函数的类，一般情况下要定义一个虚析构函数。</p><p>纯虚函数不能new。</p><hr><blockquote><p>构造函数不能声明为虚函数的原因？</p></blockquote><ol><li><p>构造一个对象时，必须知道对象实际类型，而虚函数是在运行期间确定实际类型的。而在构造一个对象时，由于对象还未构造成功，编译器就无法知道对象的实际类型，是该类本身，还是派生类，还是其他。</p></li><li><p>虚函数的执行依赖于虚函数表，而虚函数表是在构造函数中进行初始化的，即初始化虚表指针（vptr），使得正确指向虚函数表。而在构造对象期间，虚函数表（vtable）还没有被初始化，将无法进行。</p></li></ol><blockquote><p>什么情况下，类的析构函数应该声明为虚函数？为什么？</p></blockquote><p>类A中有了虚函数就会在类的数据成员的最前面添加一个vfptr指针(void** vfptr)，这个指针用来指向一个vtable表（一个函数指针数组）（一个类只有一个该表），该表存储着当前类的所有虚函数的地址。这样vfptr就成为了一个类似成员变量的存在。访问虚函数的时候通过vfptr间址找到vtable表，再间址进而找到要调用的函数。这样就在一定程度上摆脱了类型制约。</p><p>当B类继承A类的时候，因为A中有虚函数，编译器就自动的给B类添加vfprt指针和vtable表。也可以理解为B类继承来了A类中的那个vptr指针成员。（B对象的vfptr浅拷贝到A对象的vfptr）因此，A对象的vfptr所指向的是B对象的虚函数表，而B的析构函数位于书函数表0的位置，因此，这样就可以通过A类对象的指针d，找到B类对象的析构函数，从而在delete d;时，可以销毁B对象，而不会产生内存泄漏和异常。</p><ul><li>简单得来讲：析构函数设为虚函数的原因是为了防止内存泄露。在继承体系中，当基类的指针或引用指向派生类，用基类delete时，如果基类的析构函数没有声明为虚函数，只能析构基类对象，派生类对象将无法析构。因为普通函数受类型的制约，（因为没有vptr指针）使用哪个类的指针调用函数，那么所调用的就是那个累的函数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># bug复现</span><br><span class="line">a* aa= new b(); // b继承a</span><br><span class="line">delete aa;</span><br><span class="line">// 打印（执行） a 的析构函数，不执行b的</span><br></pre></td></tr></table></figure></li></ul><p>所以需要将基类的析构函数声明为虚函数，当撤销基类对象的同时也撤销派生类的对象，这个过程是动态关联完成的。</p><hr><blockquote><p>内联函数不能是虚函数</p></blockquote><p>内联函数会在预编译时会进行代码展开，省略函数调用，因此内联函数不能是虚函数。虽然使用inline和virtual共同修饰一个函数时能够通过编译，并在调用时会表现出虚函数的性质，但这是因为编译器在函数声明中遇到virtual关键字时，会选择忽略inline关键字，不进行代码展开。</p><blockquote><p>静态函数不能声明为虚函数</p></blockquote><p>虚函数体现了对象在运行时的多态性，而静态函数属于整个类，不属于某个对象，不能声明为虚函数。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编译过程</title>
      <link href="/2019/08/12/-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/08/12/-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<pre class="mermaid">graph TD    classDef className fill:white,stroke:#333,stroke-width:1px;    id(预处理,做优化,生成.i文件)-->id1[编译器,生成.s文件]    id1[编译器,生成.s文件]-->id2[汇编器,生成.o文件]    id2[汇编器,生成.o文件]-->id3[链接器,连接库文件和其他目标文件]    id3[链接器,连接库文件和其他目标文件]-->id4(生成可执行文件)    class id,id1,id2,id3,id4 className;</pre><h4 id="C-预处理阶段主要完成的工作："><a href="#C-预处理阶段主要完成的工作：" class="headerlink" title="C++预处理阶段主要完成的工作："></a>C++预处理阶段主要完成的工作：</h4><p>处理#开始的预编译指令：<br>（1）宏定义(#define)：对宏定义进行字符串替换。<br>（2）文件包含(#include)：文件包含命令把指定头文件插入该命令行位置取代该命令行，从而把指定的文件和当前的源程序文件连成一个源文件。<br>（3）条件编译(#ifdef)：当满足某条件时语句进行编译，而当条件不满足时则编译另一组语句。条件编译对程序的移植和调试是很有用的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifndef  Linux</span><br><span class="line">linux平台下运行的函数</span><br><span class="line">#else</span><br><span class="line">#ifndef  windows</span><br><span class="line">Windows平台下运行的函数</span><br><span class="line">#endif         </span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></p><h4 id="汇编阶段："><a href="#汇编阶段：" class="headerlink" title="汇编阶段："></a>汇编阶段：</h4><p>直接生成了汇编代码</p><h4 id="链接器阶段"><a href="#链接器阶段" class="headerlink" title="链接器阶段"></a>链接器阶段</h4><p>（1）函数重载：同名函数，不同函数输入变量/输出变量的类型/不同功能。<br>（2）inline函数：如果函数体不太大，对此函数的所有调用都以函数本体去替代，注意inline只是对编译器的一个建议申请，不是强制命令<br>（3）模板处理：函数定义（包括具现化后的函数模板，类模板的成员函数），变量定义（包括函数模板的静态数据变量，类模板的静态数据变量，类模板的全局对象等）<br>（4）虚函数：每一个多态class都有一份虚函数表，定义或继承了虚函数的对象会有一个隐含成员：指向虚表的指针vptr，在构造或析构对象的时候，编译器生成的代码会修改这个指针。按道理说，一个多态class的虚表应该恰好被一个目标文件定义，这样链接就不会有错，但c++编译器有时无法判断是否应该在当前编译单元生成虚表定义，为保险起见，只能每个编译单元都生成虚表，然后交给链接器来消除重复数据。</p><ul><li>C++使用的也是C语言的单遍编译的方式，从头到尾扫描一遍源码，一边解析源码，一边即刻生成目标代码</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/11/hello-world/"/>
      <url>/2019/08/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p id="1"></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p><p><a href="#1">第一段</a></p><p><img src="\\images\pasted-26.png\" alt="upload successful"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特征工程-特征归一化</title>
      <link href="/2019/08/06/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B-%E7%89%B9%E5%BE%81%E5%BD%92%E4%B8%80%E5%8C%96/"/>
      <url>/2019/08/06/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B-%E7%89%B9%E5%BE%81%E5%BD%92%E4%B8%80%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要归一化？"><a href="#为什么要归一化？" class="headerlink" title="为什么要归一化？"></a>为什么要归一化？</h2><p>在实际应用中，通过梯度下降一类的方法需要进行归一化，比如逻辑回归，线性回归，SVM，神经网络，Adaboost，SVM，LR，Knn，KMeans等。但是决策树，朴素贝叶斯，隐马尔可夫等模型不需要归一化。因为前者是基于数值的决策，对单位敏感度高，如果不进行归一化操作可能会导致x/y中有一个变量的影响力$\uparrow$，可能需要更多轮次的迭代才能得到最终解。后者基于交叉熵的信息增益，基于概率分布模型，而概率本身是归一化的（%），所以不需要归一化。</p><p><div align="center">![upload successful](\images\pasted-1.png)</div></p><h3 id="逻辑回归一定要归一化么？"><a href="#逻辑回归一定要归一化么？" class="headerlink" title="逻辑回归一定要归一化么？"></a>逻辑回归一定要归一化么？</h3><p>如果你用了L1L2正则的话需要，因为不用正则时，我们的损失函数只是仅仅在度量预测与真实的差距，加上正则后，我们的损失函数除了要度量上面的差距外，还要度量参数值是否足够小。而参数值的大小程度是与特征的数值范围相关的。</p><h2 id="归一化的方法"><a href="#归一化的方法" class="headerlink" title="归一化的方法"></a>归一化的方法</h2><ol><li>线性函数归一化（适用于简单数值）：$X=\frac{X-X_{min}}{X_{max}-X_{min}}$</li><li>0均值归一化：$z=\frac{x-u}{\sigma}$</li></ol>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
